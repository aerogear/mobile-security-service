// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apps

import (
	"github.com/aerogear/mobile-security-service/pkg/models"
	"sync"
)

var (
	lockServiceMockCreateApp                    sync.RWMutex
	lockServiceMockDeleteAppById                sync.RWMutex
	lockServiceMockDisableAllAppVersionsByAppID sync.RWMutex
	lockServiceMockGetActiveAppByAppID          sync.RWMutex
	lockServiceMockGetActiveAppByID             sync.RWMutex
	lockServiceMockGetApps                      sync.RWMutex
	lockServiceMockInitClientApp                sync.RWMutex
	lockServiceMockUpdateAppVersions            sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateAppFunc: func(app models.App) error {
// 	               panic("mock out the CreateApp method")
//             },
//             DeleteAppByIdFunc: func(id string) error {
// 	               panic("mock out the DeleteAppById method")
//             },
//             DisableAllAppVersionsByAppIDFunc: func(id string, message string) error {
// 	               panic("mock out the DisableAllAppVersionsByAppID method")
//             },
//             GetActiveAppByAppIDFunc: func(appId string) (*models.App, error) {
// 	               panic("mock out the GetActiveAppByAppID method")
//             },
//             GetActiveAppByIDFunc: func(ID string) (*models.App, error) {
// 	               panic("mock out the GetActiveAppByID method")
//             },
//             GetAppsFunc: func() (*[]models.App, error) {
// 	               panic("mock out the GetApps method")
//             },
//             InitClientAppFunc: func(deviceInfo *models.Device) (*models.Version, error) {
// 	               panic("mock out the InitClientApp method")
//             },
//             UpdateAppVersionsFunc: func(id string, versions []models.Version) error {
// 	               panic("mock out the UpdateAppVersions method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateAppFunc mocks the CreateApp method.
	CreateAppFunc func(app models.App) error

	// DeleteAppByIdFunc mocks the DeleteAppById method.
	DeleteAppByIdFunc func(id string) error

	// DisableAllAppVersionsByAppIDFunc mocks the DisableAllAppVersionsByAppID method.
	DisableAllAppVersionsByAppIDFunc func(id string, message string) error

	// GetActiveAppByAppIDFunc mocks the GetActiveAppByAppID method.
	GetActiveAppByAppIDFunc func(appId string) (*models.App, error)

	// GetActiveAppByIDFunc mocks the GetActiveAppByID method.
	GetActiveAppByIDFunc func(ID string) (*models.App, error)

	// GetAppsFunc mocks the GetApps method.
	GetAppsFunc func() (*[]models.App, error)

	// InitClientAppFunc mocks the InitClientApp method.
	InitClientAppFunc func(deviceInfo *models.Device) (*models.Version, error)

	// UpdateAppVersionsFunc mocks the UpdateAppVersions method.
	UpdateAppVersionsFunc func(id string, versions []models.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateApp holds details about calls to the CreateApp method.
		CreateApp []struct {
			// App is the app argument value.
			App models.App
		}
		// DeleteAppById holds details about calls to the DeleteAppById method.
		DeleteAppById []struct {
			// ID is the id argument value.
			ID string
		}
		// DisableAllAppVersionsByAppID holds details about calls to the DisableAllAppVersionsByAppID method.
		DisableAllAppVersionsByAppID []struct {
			// ID is the id argument value.
			ID string
			// Message is the message argument value.
			Message string
		}
		// GetActiveAppByAppID holds details about calls to the GetActiveAppByAppID method.
		GetActiveAppByAppID []struct {
			// AppId is the appId argument value.
			AppId string
		}
		// GetActiveAppByID holds details about calls to the GetActiveAppByID method.
		GetActiveAppByID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetApps holds details about calls to the GetApps method.
		GetApps []struct {
		}
		// InitClientApp holds details about calls to the InitClientApp method.
		InitClientApp []struct {
			// DeviceInfo is the deviceInfo argument value.
			DeviceInfo *models.Device
		}
		// UpdateAppVersions holds details about calls to the UpdateAppVersions method.
		UpdateAppVersions []struct {
			// ID is the id argument value.
			ID string
			// Versions is the versions argument value.
			Versions []models.Version
		}
	}
}

// CreateApp calls CreateAppFunc.
func (mock *ServiceMock) CreateApp(app models.App) error {
	if mock.CreateAppFunc == nil {
		panic("ServiceMock.CreateAppFunc: method is nil but Service.CreateApp was just called")
	}
	callInfo := struct {
		App models.App
	}{
		App: app,
	}
	lockServiceMockCreateApp.Lock()
	mock.calls.CreateApp = append(mock.calls.CreateApp, callInfo)
	lockServiceMockCreateApp.Unlock()
	return mock.CreateAppFunc(app)
}

// CreateAppCalls gets all the calls that were made to CreateApp.
// Check the length with:
//     len(mockedService.CreateAppCalls())
func (mock *ServiceMock) CreateAppCalls() []struct {
	App models.App
} {
	var calls []struct {
		App models.App
	}
	lockServiceMockCreateApp.RLock()
	calls = mock.calls.CreateApp
	lockServiceMockCreateApp.RUnlock()
	return calls
}

// DeleteAppById calls DeleteAppByIdFunc.
func (mock *ServiceMock) DeleteAppById(id string) error {
	if mock.DeleteAppByIdFunc == nil {
		panic("ServiceMock.DeleteAppByIdFunc: method is nil but Service.DeleteAppById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockServiceMockDeleteAppById.Lock()
	mock.calls.DeleteAppById = append(mock.calls.DeleteAppById, callInfo)
	lockServiceMockDeleteAppById.Unlock()
	return mock.DeleteAppByIdFunc(id)
}

// DeleteAppByIdCalls gets all the calls that were made to DeleteAppById.
// Check the length with:
//     len(mockedService.DeleteAppByIdCalls())
func (mock *ServiceMock) DeleteAppByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockServiceMockDeleteAppById.RLock()
	calls = mock.calls.DeleteAppById
	lockServiceMockDeleteAppById.RUnlock()
	return calls
}

// DisableAllAppVersionsByAppID calls DisableAllAppVersionsByAppIDFunc.
func (mock *ServiceMock) DisableAllAppVersionsByAppID(id string, message string) error {
	if mock.DisableAllAppVersionsByAppIDFunc == nil {
		panic("ServiceMock.DisableAllAppVersionsByAppIDFunc: method is nil but Service.DisableAllAppVersionsByAppID was just called")
	}
	callInfo := struct {
		ID      string
		Message string
	}{
		ID:      id,
		Message: message,
	}
	lockServiceMockDisableAllAppVersionsByAppID.Lock()
	mock.calls.DisableAllAppVersionsByAppID = append(mock.calls.DisableAllAppVersionsByAppID, callInfo)
	lockServiceMockDisableAllAppVersionsByAppID.Unlock()
	return mock.DisableAllAppVersionsByAppIDFunc(id, message)
}

// DisableAllAppVersionsByAppIDCalls gets all the calls that were made to DisableAllAppVersionsByAppID.
// Check the length with:
//     len(mockedService.DisableAllAppVersionsByAppIDCalls())
func (mock *ServiceMock) DisableAllAppVersionsByAppIDCalls() []struct {
	ID      string
	Message string
} {
	var calls []struct {
		ID      string
		Message string
	}
	lockServiceMockDisableAllAppVersionsByAppID.RLock()
	calls = mock.calls.DisableAllAppVersionsByAppID
	lockServiceMockDisableAllAppVersionsByAppID.RUnlock()
	return calls
}

// GetActiveAppByAppID calls GetActiveAppByAppIDFunc.
func (mock *ServiceMock) GetActiveAppByAppID(appId string) (*models.App, error) {
	if mock.GetActiveAppByAppIDFunc == nil {
		panic("ServiceMock.GetActiveAppByAppIDFunc: method is nil but Service.GetActiveAppByAppID was just called")
	}
	callInfo := struct {
		AppId string
	}{
		AppId: appId,
	}
	lockServiceMockGetActiveAppByAppID.Lock()
	mock.calls.GetActiveAppByAppID = append(mock.calls.GetActiveAppByAppID, callInfo)
	lockServiceMockGetActiveAppByAppID.Unlock()
	return mock.GetActiveAppByAppIDFunc(appId)
}

// GetActiveAppByAppIDCalls gets all the calls that were made to GetActiveAppByAppID.
// Check the length with:
//     len(mockedService.GetActiveAppByAppIDCalls())
func (mock *ServiceMock) GetActiveAppByAppIDCalls() []struct {
	AppId string
} {
	var calls []struct {
		AppId string
	}
	lockServiceMockGetActiveAppByAppID.RLock()
	calls = mock.calls.GetActiveAppByAppID
	lockServiceMockGetActiveAppByAppID.RUnlock()
	return calls
}

// GetActiveAppByID calls GetActiveAppByIDFunc.
func (mock *ServiceMock) GetActiveAppByID(ID string) (*models.App, error) {
	if mock.GetActiveAppByIDFunc == nil {
		panic("ServiceMock.GetActiveAppByIDFunc: method is nil but Service.GetActiveAppByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockServiceMockGetActiveAppByID.Lock()
	mock.calls.GetActiveAppByID = append(mock.calls.GetActiveAppByID, callInfo)
	lockServiceMockGetActiveAppByID.Unlock()
	return mock.GetActiveAppByIDFunc(ID)
}

// GetActiveAppByIDCalls gets all the calls that were made to GetActiveAppByID.
// Check the length with:
//     len(mockedService.GetActiveAppByIDCalls())
func (mock *ServiceMock) GetActiveAppByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockServiceMockGetActiveAppByID.RLock()
	calls = mock.calls.GetActiveAppByID
	lockServiceMockGetActiveAppByID.RUnlock()
	return calls
}

// GetApps calls GetAppsFunc.
func (mock *ServiceMock) GetApps() (*[]models.App, error) {
	if mock.GetAppsFunc == nil {
		panic("ServiceMock.GetAppsFunc: method is nil but Service.GetApps was just called")
	}
	callInfo := struct {
	}{}
	lockServiceMockGetApps.Lock()
	mock.calls.GetApps = append(mock.calls.GetApps, callInfo)
	lockServiceMockGetApps.Unlock()
	return mock.GetAppsFunc()
}

// GetAppsCalls gets all the calls that were made to GetApps.
// Check the length with:
//     len(mockedService.GetAppsCalls())
func (mock *ServiceMock) GetAppsCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceMockGetApps.RLock()
	calls = mock.calls.GetApps
	lockServiceMockGetApps.RUnlock()
	return calls
}

// InitClientApp calls InitClientAppFunc.
func (mock *ServiceMock) InitClientApp(deviceInfo *models.Device) (*models.Version, error) {
	if mock.InitClientAppFunc == nil {
		panic("ServiceMock.InitClientAppFunc: method is nil but Service.InitClientApp was just called")
	}
	callInfo := struct {
		DeviceInfo *models.Device
	}{
		DeviceInfo: deviceInfo,
	}
	lockServiceMockInitClientApp.Lock()
	mock.calls.InitClientApp = append(mock.calls.InitClientApp, callInfo)
	lockServiceMockInitClientApp.Unlock()
	return mock.InitClientAppFunc(deviceInfo)
}

// InitClientAppCalls gets all the calls that were made to InitClientApp.
// Check the length with:
//     len(mockedService.InitClientAppCalls())
func (mock *ServiceMock) InitClientAppCalls() []struct {
	DeviceInfo *models.Device
} {
	var calls []struct {
		DeviceInfo *models.Device
	}
	lockServiceMockInitClientApp.RLock()
	calls = mock.calls.InitClientApp
	lockServiceMockInitClientApp.RUnlock()
	return calls
}

// UpdateAppVersions calls UpdateAppVersionsFunc.
func (mock *ServiceMock) UpdateAppVersions(id string, versions []models.Version) error {
	if mock.UpdateAppVersionsFunc == nil {
		panic("ServiceMock.UpdateAppVersionsFunc: method is nil but Service.UpdateAppVersions was just called")
	}
	callInfo := struct {
		ID       string
		Versions []models.Version
	}{
		ID:       id,
		Versions: versions,
	}
	lockServiceMockUpdateAppVersions.Lock()
	mock.calls.UpdateAppVersions = append(mock.calls.UpdateAppVersions, callInfo)
	lockServiceMockUpdateAppVersions.Unlock()
	return mock.UpdateAppVersionsFunc(id, versions)
}

// UpdateAppVersionsCalls gets all the calls that were made to UpdateAppVersions.
// Check the length with:
//     len(mockedService.UpdateAppVersionsCalls())
func (mock *ServiceMock) UpdateAppVersionsCalls() []struct {
	ID       string
	Versions []models.Version
} {
	var calls []struct {
		ID       string
		Versions []models.Version
	}
	lockServiceMockUpdateAppVersions.RLock()
	calls = mock.calls.UpdateAppVersions
	lockServiceMockUpdateAppVersions.RUnlock()
	return calls
}
