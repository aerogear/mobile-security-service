// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apps

import (
	"github.com/aerogear/mobile-security-service/pkg/models"
	"sync"
)

var (
	lockServiceMockBindingAppByApp              sync.RWMutex
	lockServiceMockDisableAllAppVersionsByAppID sync.RWMutex
	lockServiceMockGetActiveAppByID             sync.RWMutex
	lockServiceMockGetApps                      sync.RWMutex
	lockServiceMockInitClientApp                sync.RWMutex
	lockServiceMockUnbindingAppByAppID          sync.RWMutex
	lockServiceMockUpdateAppVersions            sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             BindingAppByAppFunc: func(appId string, name string) error {
// 	               panic("mock out the BindingAppByApp method")
//             },
//             DisableAllAppVersionsByAppIDFunc: func(id string, message string) error {
// 	               panic("mock out the DisableAllAppVersionsByAppID method")
//             },
//             GetActiveAppByIDFunc: func(ID string) (*models.App, error) {
// 	               panic("mock out the GetActiveAppByID method")
//             },
//             GetAppsFunc: func() (*[]models.App, error) {
// 	               panic("mock out the GetApps method")
//             },
//             InitClientAppFunc: func(deviceInfo *models.Device) (*models.Version, error) {
// 	               panic("mock out the InitClientApp method")
//             },
//             UnbindingAppByAppIDFunc: func(appID string) error {
// 	               panic("mock out the UnbindingAppByAppID method")
//             },
//             UpdateAppVersionsFunc: func(versions []models.Version) error {
// 	               panic("mock out the UpdateAppVersions method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// BindingAppByAppFunc mocks the BindingAppByApp method.
	BindingAppByAppFunc func(appId string, name string) error

	// DisableAllAppVersionsByAppIDFunc mocks the DisableAllAppVersionsByAppID method.
	DisableAllAppVersionsByAppIDFunc func(id string, message string) error

	// GetActiveAppByIDFunc mocks the GetActiveAppByID method.
	GetActiveAppByIDFunc func(ID string) (*models.App, error)

	// GetAppsFunc mocks the GetApps method.
	GetAppsFunc func() (*[]models.App, error)

	// InitClientAppFunc mocks the InitClientApp method.
	InitClientAppFunc func(deviceInfo *models.Device) (*models.Version, error)

	// UnbindingAppByAppIDFunc mocks the UnbindingAppByAppID method.
	UnbindingAppByAppIDFunc func(appID string) error

	// UpdateAppVersionsFunc mocks the UpdateAppVersions method.
	UpdateAppVersionsFunc func(versions []models.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// BindingAppByApp holds details about calls to the BindingAppByApp method.
		BindingAppByApp []struct {
			// AppId is the appId argument value.
			AppId string
			// Name is the name argument value.
			Name string
		}
		// DisableAllAppVersionsByAppID holds details about calls to the DisableAllAppVersionsByAppID method.
		DisableAllAppVersionsByAppID []struct {
			// ID is the id argument value.
			ID string
			// Message is the message argument value.
			Message string
		}
		// GetActiveAppByID holds details about calls to the GetActiveAppByID method.
		GetActiveAppByID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetApps holds details about calls to the GetApps method.
		GetApps []struct {
		}
		// InitClientApp holds details about calls to the InitClientApp method.
		InitClientApp []struct {
			// DeviceInfo is the deviceInfo argument value.
			DeviceInfo *models.Device
		}
		// UnbindingAppByAppID holds details about calls to the UnbindingAppByAppID method.
		UnbindingAppByAppID []struct {
			// AppID is the appID argument value.
			AppID string
		}
		// UpdateAppVersions holds details about calls to the UpdateAppVersions method.
		UpdateAppVersions []struct {
			// Versions is the versions argument value.
			Versions []models.Version
		}
	}
}

// BindingAppByApp calls BindingAppByAppFunc.
func (mock *ServiceMock) BindingAppByApp(appId string, name string) error {
	if mock.BindingAppByAppFunc == nil {
		panic("ServiceMock.BindingAppByAppFunc: method is nil but Service.BindingAppByApp was just called")
	}
	callInfo := struct {
		AppId string
		Name  string
	}{
		AppId: appId,
		Name:  name,
	}
	lockServiceMockBindingAppByApp.Lock()
	mock.calls.BindingAppByApp = append(mock.calls.BindingAppByApp, callInfo)
	lockServiceMockBindingAppByApp.Unlock()
	return mock.BindingAppByAppFunc(appId, name)
}

// BindingAppByAppCalls gets all the calls that were made to BindingAppByApp.
// Check the length with:
//     len(mockedService.BindingAppByAppCalls())
func (mock *ServiceMock) BindingAppByAppCalls() []struct {
	AppId string
	Name  string
} {
	var calls []struct {
		AppId string
		Name  string
	}
	lockServiceMockBindingAppByApp.RLock()
	calls = mock.calls.BindingAppByApp
	lockServiceMockBindingAppByApp.RUnlock()
	return calls
}

// DisableAllAppVersionsByAppID calls DisableAllAppVersionsByAppIDFunc.
func (mock *ServiceMock) DisableAllAppVersionsByAppID(id string, message string) error {
	if mock.DisableAllAppVersionsByAppIDFunc == nil {
		panic("ServiceMock.DisableAllAppVersionsByAppIDFunc: method is nil but Service.DisableAllAppVersionsByAppID was just called")
	}
	callInfo := struct {
		ID      string
		Message string
	}{
		ID:      id,
		Message: message,
	}
	lockServiceMockDisableAllAppVersionsByAppID.Lock()
	mock.calls.DisableAllAppVersionsByAppID = append(mock.calls.DisableAllAppVersionsByAppID, callInfo)
	lockServiceMockDisableAllAppVersionsByAppID.Unlock()
	return mock.DisableAllAppVersionsByAppIDFunc(id, message)
}

// DisableAllAppVersionsByAppIDCalls gets all the calls that were made to DisableAllAppVersionsByAppID.
// Check the length with:
//     len(mockedService.DisableAllAppVersionsByAppIDCalls())
func (mock *ServiceMock) DisableAllAppVersionsByAppIDCalls() []struct {
	ID      string
	Message string
} {
	var calls []struct {
		ID      string
		Message string
	}
	lockServiceMockDisableAllAppVersionsByAppID.RLock()
	calls = mock.calls.DisableAllAppVersionsByAppID
	lockServiceMockDisableAllAppVersionsByAppID.RUnlock()
	return calls
}

// GetActiveAppByID calls GetActiveAppByIDFunc.
func (mock *ServiceMock) GetActiveAppByID(ID string) (*models.App, error) {
	if mock.GetActiveAppByIDFunc == nil {
		panic("ServiceMock.GetActiveAppByIDFunc: method is nil but Service.GetActiveAppByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockServiceMockGetActiveAppByID.Lock()
	mock.calls.GetActiveAppByID = append(mock.calls.GetActiveAppByID, callInfo)
	lockServiceMockGetActiveAppByID.Unlock()
	return mock.GetActiveAppByIDFunc(ID)
}

// GetActiveAppByIDCalls gets all the calls that were made to GetActiveAppByID.
// Check the length with:
//     len(mockedService.GetActiveAppByIDCalls())
func (mock *ServiceMock) GetActiveAppByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockServiceMockGetActiveAppByID.RLock()
	calls = mock.calls.GetActiveAppByID
	lockServiceMockGetActiveAppByID.RUnlock()
	return calls
}

// GetApps calls GetAppsFunc.
func (mock *ServiceMock) GetApps() (*[]models.App, error) {
	if mock.GetAppsFunc == nil {
		panic("ServiceMock.GetAppsFunc: method is nil but Service.GetApps was just called")
	}
	callInfo := struct {
	}{}
	lockServiceMockGetApps.Lock()
	mock.calls.GetApps = append(mock.calls.GetApps, callInfo)
	lockServiceMockGetApps.Unlock()
	return mock.GetAppsFunc()
}

// GetAppsCalls gets all the calls that were made to GetApps.
// Check the length with:
//     len(mockedService.GetAppsCalls())
func (mock *ServiceMock) GetAppsCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceMockGetApps.RLock()
	calls = mock.calls.GetApps
	lockServiceMockGetApps.RUnlock()
	return calls
}

// InitClientApp calls InitClientAppFunc.
func (mock *ServiceMock) InitClientApp(deviceInfo *models.Device) (*models.Version, error) {
	if mock.InitClientAppFunc == nil {
		panic("ServiceMock.InitClientAppFunc: method is nil but Service.InitClientApp was just called")
	}
	callInfo := struct {
		DeviceInfo *models.Device
	}{
		DeviceInfo: deviceInfo,
	}
	lockServiceMockInitClientApp.Lock()
	mock.calls.InitClientApp = append(mock.calls.InitClientApp, callInfo)
	lockServiceMockInitClientApp.Unlock()
	return mock.InitClientAppFunc(deviceInfo)
}

// InitClientAppCalls gets all the calls that were made to InitClientApp.
// Check the length with:
//     len(mockedService.InitClientAppCalls())
func (mock *ServiceMock) InitClientAppCalls() []struct {
	DeviceInfo *models.Device
} {
	var calls []struct {
		DeviceInfo *models.Device
	}
	lockServiceMockInitClientApp.RLock()
	calls = mock.calls.InitClientApp
	lockServiceMockInitClientApp.RUnlock()
	return calls
}

// UnbindingAppByAppID calls UnbindingAppByAppIDFunc.
func (mock *ServiceMock) UnbindingAppByAppID(appID string) error {
	if mock.UnbindingAppByAppIDFunc == nil {
		panic("ServiceMock.UnbindingAppByAppIDFunc: method is nil but Service.UnbindingAppByAppID was just called")
	}
	callInfo := struct {
		AppID string
	}{
		AppID: appID,
	}
	lockServiceMockUnbindingAppByAppID.Lock()
	mock.calls.UnbindingAppByAppID = append(mock.calls.UnbindingAppByAppID, callInfo)
	lockServiceMockUnbindingAppByAppID.Unlock()
	return mock.UnbindingAppByAppIDFunc(appID)
}

// UnbindingAppByAppIDCalls gets all the calls that were made to UnbindingAppByAppID.
// Check the length with:
//     len(mockedService.UnbindingAppByAppIDCalls())
func (mock *ServiceMock) UnbindingAppByAppIDCalls() []struct {
	AppID string
} {
	var calls []struct {
		AppID string
	}
	lockServiceMockUnbindingAppByAppID.RLock()
	calls = mock.calls.UnbindingAppByAppID
	lockServiceMockUnbindingAppByAppID.RUnlock()
	return calls
}

// UpdateAppVersions calls UpdateAppVersionsFunc.
func (mock *ServiceMock) UpdateAppVersions(versions []models.Version) error {
	if mock.UpdateAppVersionsFunc == nil {
		panic("ServiceMock.UpdateAppVersionsFunc: method is nil but Service.UpdateAppVersions was just called")
	}
	callInfo := struct {
		Versions []models.Version
	}{
		Versions: versions,
	}
	lockServiceMockUpdateAppVersions.Lock()
	mock.calls.UpdateAppVersions = append(mock.calls.UpdateAppVersions, callInfo)
	lockServiceMockUpdateAppVersions.Unlock()
	return mock.UpdateAppVersionsFunc(versions)
}

// UpdateAppVersionsCalls gets all the calls that were made to UpdateAppVersions.
// Check the length with:
//     len(mockedService.UpdateAppVersionsCalls())
func (mock *ServiceMock) UpdateAppVersionsCalls() []struct {
	Versions []models.Version
} {
	var calls []struct {
		Versions []models.Version
	}
	lockServiceMockUpdateAppVersions.RLock()
	calls = mock.calls.UpdateAppVersions
	lockServiceMockUpdateAppVersions.RUnlock()
	return calls
}
