// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apps

import (
	"github.com/aerogear/mobile-security-service/pkg/models"
	"sync"
)

var (
	lockPostgreSQLRepositoryMockGetAppByID            sync.RWMutex
	lockPostgreSQLRepositoryMockGetAppVersionsByAppID sync.RWMutex
	lockPostgreSQLRepositoryMockGetApps               sync.RWMutex
)

// Ensure, that PostgreSQLRepositoryMock does implement PostgreSQLRepository.
var _ PostgreSQLRepository = &PostgreSQLRepositoryMock{}

// PostgreSQLRepositoryMock is a mock implementation of PostgreSQLRepository.
//
//     func TestSomethingThatUsesPostgreSQLRepository(t *testing.T) {
//
//         // make and configure a mocked PostgreSQLRepository
//         mockedPostgreSQLRepository := &PostgreSQLRepositoryMock{
//             GetAppByIDFunc: func(ID string) (*models.App, error) {
// 	               panic("mock out the GetAppByID method")
//             },
//             GetAppVersionsByAppIDFunc: func(ID string) (*[]models.Version, error) {
// 	               panic("mock out the GetAppVersionsByAppID method")
//             },
//             GetAppsFunc: func() (*[]models.App, error) {
// 	               panic("mock out the GetApps method")
//             },
//         }
//
//         // use mockedPostgreSQLRepository in code that requires PostgreSQLRepository
//         // and then make assertions.
//
//     }
type PostgreSQLRepositoryMock struct {
	// GetAppByIDFunc mocks the GetAppByID method.
	GetAppByIDFunc func(ID string) (*models.App, error)

	// GetAppVersionsByAppIDFunc mocks the GetAppVersionsByAppID method.
	GetAppVersionsByAppIDFunc func(ID string) (*[]models.Version, error)

	// GetAppsFunc mocks the GetApps method.
	GetAppsFunc func() (*[]models.App, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAppByID holds details about calls to the GetAppByID method.
		GetAppByID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetAppVersionsByAppID holds details about calls to the GetAppVersionsByAppID method.
		GetAppVersionsByAppID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetApps holds details about calls to the GetApps method.
		GetApps []struct {
		}
	}
}

// GetAppByID calls GetAppByIDFunc.
func (mock *PostgreSQLRepositoryMock) GetAppByID(ID string) (*models.App, error) {
	if mock.GetAppByIDFunc == nil {
		panic("PostgreSQLRepositoryMock.GetAppByIDFunc: method is nil but PostgreSQLRepository.GetAppByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockPostgreSQLRepositoryMockGetAppByID.Lock()
	mock.calls.GetAppByID = append(mock.calls.GetAppByID, callInfo)
	lockPostgreSQLRepositoryMockGetAppByID.Unlock()
	return mock.GetAppByIDFunc(ID)
}

// GetAppByIDCalls gets all the calls that were made to GetAppByID.
// Check the length with:
//     len(mockedPostgreSQLRepository.GetAppByIDCalls())
func (mock *PostgreSQLRepositoryMock) GetAppByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockPostgreSQLRepositoryMockGetAppByID.RLock()
	calls = mock.calls.GetAppByID
	lockPostgreSQLRepositoryMockGetAppByID.RUnlock()
	return calls
}

// GetAppVersionsByAppID calls GetAppVersionsByAppIDFunc.
func (mock *PostgreSQLRepositoryMock) GetAppVersionsByAppID(ID string) (*[]models.Version, error) {
	if mock.GetAppVersionsByAppIDFunc == nil {
		panic("PostgreSQLRepositoryMock.GetAppVersionsByAppIDFunc: method is nil but PostgreSQLRepository.GetAppVersionsByAppID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockPostgreSQLRepositoryMockGetAppVersionsByAppID.Lock()
	mock.calls.GetAppVersionsByAppID = append(mock.calls.GetAppVersionsByAppID, callInfo)
	lockPostgreSQLRepositoryMockGetAppVersionsByAppID.Unlock()
	return mock.GetAppVersionsByAppIDFunc(ID)
}

// GetAppVersionsByAppIDCalls gets all the calls that were made to GetAppVersionsByAppID.
// Check the length with:
//     len(mockedPostgreSQLRepository.GetAppVersionsByAppIDCalls())
func (mock *PostgreSQLRepositoryMock) GetAppVersionsByAppIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockPostgreSQLRepositoryMockGetAppVersionsByAppID.RLock()
	calls = mock.calls.GetAppVersionsByAppID
	lockPostgreSQLRepositoryMockGetAppVersionsByAppID.RUnlock()
	return calls
}

// GetApps calls GetAppsFunc.
func (mock *PostgreSQLRepositoryMock) GetApps() (*[]models.App, error) {
	if mock.GetAppsFunc == nil {
		panic("PostgreSQLRepositoryMock.GetAppsFunc: method is nil but PostgreSQLRepository.GetApps was just called")
	}
	callInfo := struct {
	}{}
	lockPostgreSQLRepositoryMockGetApps.Lock()
	mock.calls.GetApps = append(mock.calls.GetApps, callInfo)
	lockPostgreSQLRepositoryMockGetApps.Unlock()
	return mock.GetAppsFunc()
}

// GetAppsCalls gets all the calls that were made to GetApps.
// Check the length with:
//     len(mockedPostgreSQLRepository.GetAppsCalls())
func (mock *PostgreSQLRepositoryMock) GetAppsCalls() []struct {
} {
	var calls []struct {
	}
	lockPostgreSQLRepositoryMockGetApps.RLock()
	calls = mock.calls.GetApps
	lockPostgreSQLRepositoryMockGetApps.RUnlock()
	return calls
}
