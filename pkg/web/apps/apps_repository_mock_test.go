// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apps

import (
	"github.com/aerogear/mobile-security-service/pkg/models"
	"sync"
)

var (
	lockRepositoryMockCreateApp                    sync.RWMutex
	lockRepositoryMockDeleteAppByAppID             sync.RWMutex
	lockRepositoryMockDisableAllAppVersionsByAppID sync.RWMutex
	lockRepositoryMockGetAppByAppID                sync.RWMutex
	lockRepositoryMockGetActiveAppByID             sync.RWMutex
	lockRepositoryMockGetAppVersionsByAppID        sync.RWMutex
	lockRepositoryMockGetApps                      sync.RWMutex
	lockRepositoryMockUnDeleteAppByAppID           sync.RWMutex
	lockRepositoryMockUpdateAppVersions            sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             CreateAppFunc: func(id string, appId string, name string) error {
// 	               panic("mock out the CreateApp method")
//             },
//             DeleteAppByAppIDFunc: func(appId string) error {
// 	               panic("mock out the DeleteAppByAppID method")
//             },
//             DisableAllAppVersionsByAppIDFunc: func(appID string, message string) error {
// 	               panic("mock out the DisableAllAppVersionsByAppID method")
//             },
//             GetAppByAppIDFunc: func(appID string) (*models.App, error) {
// 	               panic("mock out the GetAppByAppID method")
//             },
//             GetActiveAppByIDFunc: func(ID string) (*models.App, error) {
// 	               panic("mock out the GetActiveAppByID method")
//             },
//             GetAppVersionsByAppIDFunc: func(ID string) (*[]models.Version, error) {
// 	               panic("mock out the GetAppVersionsByAppID method")
//             },
//             GetAppsFunc: func() (*[]models.App, error) {
// 	               panic("mock out the GetApps method")
//             },
//             UnDeleteAppByAppIDFunc: func(appID string) error {
// 	               panic("mock out the UnDeleteAppByAppID method")
//             },
//             UpdateAppVersionsFunc: func(versions []models.Version) error {
// 	               panic("mock out the UpdateAppVersions method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// CreateAppFunc mocks the CreateApp method.
	CreateAppFunc func(id string, appId string, name string) error

	// DeleteAppByAppIDFunc mocks the DeleteAppByAppID method.
	DeleteAppByAppIDFunc func(appId string) error

	// DisableAllAppVersionsByAppIDFunc mocks the DisableAllAppVersionsByAppID method.
	DisableAllAppVersionsByAppIDFunc func(appID string, message string) error

	// GetAppByAppIDFunc mocks the GetAppByAppID method.
	GetAppByAppIDFunc func(appID string) (*models.App, error)

	// GetActiveAppByIDFunc mocks the GetActiveAppByID method.
	GetActiveAppByIDFunc func(ID string) (*models.App, error)

	// GetAppVersionsByAppIDFunc mocks the GetAppVersionsByAppID method.
	GetAppVersionsByAppIDFunc func(ID string) (*[]models.Version, error)

	// GetAppsFunc mocks the GetApps method.
	GetAppsFunc func() (*[]models.App, error)

	// UnDeleteAppByAppIDFunc mocks the UnDeleteAppByAppID method.
	UnDeleteAppByAppIDFunc func(appID string) error

	// UpdateAppVersionsFunc mocks the UpdateAppVersions method.
	UpdateAppVersionsFunc func(versions []models.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateApp holds details about calls to the CreateApp method.
		CreateApp []struct {
			// ID is the id argument value.
			ID string
			// AppId is the appId argument value.
			AppId string
			// Name is the name argument value.
			Name string
		}
		// DeleteAppByAppID holds details about calls to the DeleteAppByAppID method.
		DeleteAppByAppID []struct {
			// AppId is the appId argument value.
			AppId string
		}
		// DisableAllAppVersionsByAppID holds details about calls to the DisableAllAppVersionsByAppID method.
		DisableAllAppVersionsByAppID []struct {
			// AppID is the appID argument value.
			AppID string
			// Message is the message argument value.
			Message string
		}
		// GetAppByAppID holds details about calls to the GetAppByAppID method.
		GetAppByAppID []struct {
			// AppID is the appID argument value.
			AppID string
		}
		// GetActiveAppByID holds details about calls to the GetActiveAppByID method.
		GetActiveAppByID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetAppVersionsByAppID holds details about calls to the GetAppVersionsByAppID method.
		GetAppVersionsByAppID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetApps holds details about calls to the GetApps method.
		GetApps []struct {
		}
		// UnDeleteAppByAppID holds details about calls to the UnDeleteAppByAppID method.
		UnDeleteAppByAppID []struct {
			// AppID is the appID argument value.
			AppID string
		}
		// UpdateAppVersions holds details about calls to the UpdateAppVersions method.
		UpdateAppVersions []struct {
			// Versions is the versions argument value.
			Versions []models.Version
		}
	}
}

// CreateApp calls CreateAppFunc.
func (mock *RepositoryMock) CreateApp(id string, appId string, name string) error {
	if mock.CreateAppFunc == nil {
		panic("RepositoryMock.CreateAppFunc: method is nil but Repository.CreateApp was just called")
	}
	callInfo := struct {
		ID    string
		AppId string
		Name  string
	}{
		ID:    id,
		AppId: appId,
		Name:  name,
	}
	lockRepositoryMockCreateApp.Lock()
	mock.calls.CreateApp = append(mock.calls.CreateApp, callInfo)
	lockRepositoryMockCreateApp.Unlock()
	return mock.CreateAppFunc(id, appId, name)
}

// CreateAppCalls gets all the calls that were made to CreateApp.
// Check the length with:
//     len(mockedRepository.CreateAppCalls())
func (mock *RepositoryMock) CreateAppCalls() []struct {
	ID    string
	AppId string
	Name  string
} {
	var calls []struct {
		ID    string
		AppId string
		Name  string
	}
	lockRepositoryMockCreateApp.RLock()
	calls = mock.calls.CreateApp
	lockRepositoryMockCreateApp.RUnlock()
	return calls
}

// DeleteAppByAppID calls DeleteAppByAppIDFunc.
func (mock *RepositoryMock) DeleteAppByAppID(appId string) error {
	if mock.DeleteAppByAppIDFunc == nil {
		panic("RepositoryMock.DeleteAppByAppIDFunc: method is nil but Repository.DeleteAppByAppID was just called")
	}
	callInfo := struct {
		AppId string
	}{
		AppId: appId,
	}
	lockRepositoryMockDeleteAppByAppID.Lock()
	mock.calls.DeleteAppByAppID = append(mock.calls.DeleteAppByAppID, callInfo)
	lockRepositoryMockDeleteAppByAppID.Unlock()
	return mock.DeleteAppByAppIDFunc(appId)
}

// DeleteAppByAppIDCalls gets all the calls that were made to DeleteAppByAppID.
// Check the length with:
//     len(mockedRepository.DeleteAppByAppIDCalls())
func (mock *RepositoryMock) DeleteAppByAppIDCalls() []struct {
	AppId string
} {
	var calls []struct {
		AppId string
	}
	lockRepositoryMockDeleteAppByAppID.RLock()
	calls = mock.calls.DeleteAppByAppID
	lockRepositoryMockDeleteAppByAppID.RUnlock()
	return calls
}

// DisableAllAppVersionsByAppID calls DisableAllAppVersionsByAppIDFunc.
func (mock *RepositoryMock) DisableAllAppVersionsByAppID(appID string, message string) error {
	if mock.DisableAllAppVersionsByAppIDFunc == nil {
		panic("RepositoryMock.DisableAllAppVersionsByAppIDFunc: method is nil but Repository.DisableAllAppVersionsByAppID was just called")
	}
	callInfo := struct {
		AppID   string
		Message string
	}{
		AppID:   appID,
		Message: message,
	}
	lockRepositoryMockDisableAllAppVersionsByAppID.Lock()
	mock.calls.DisableAllAppVersionsByAppID = append(mock.calls.DisableAllAppVersionsByAppID, callInfo)
	lockRepositoryMockDisableAllAppVersionsByAppID.Unlock()
	return mock.DisableAllAppVersionsByAppIDFunc(appID, message)
}

// DisableAllAppVersionsByAppIDCalls gets all the calls that were made to DisableAllAppVersionsByAppID.
// Check the length with:
//     len(mockedRepository.DisableAllAppVersionsByAppIDCalls())
func (mock *RepositoryMock) DisableAllAppVersionsByAppIDCalls() []struct {
	AppID   string
	Message string
} {
	var calls []struct {
		AppID   string
		Message string
	}
	lockRepositoryMockDisableAllAppVersionsByAppID.RLock()
	calls = mock.calls.DisableAllAppVersionsByAppID
	lockRepositoryMockDisableAllAppVersionsByAppID.RUnlock()
	return calls
}

// GetAppByAppID calls GetAppByAppIDFunc.
func (mock *RepositoryMock) GetAppByAppID(appID string) (*models.App, error) {
	if mock.GetAppByAppIDFunc == nil {
		panic("RepositoryMock.GetAppByAppIDFunc: method is nil but Repository.GetAppByAppID was just called")
	}
	callInfo := struct {
		AppID string
	}{
		AppID: appID,
	}
	lockRepositoryMockGetAppByAppID.Lock()
	mock.calls.GetAppByAppID = append(mock.calls.GetAppByAppID, callInfo)
	lockRepositoryMockGetAppByAppID.Unlock()
	return mock.GetAppByAppIDFunc(appID)
}

// GetAppByAppIDCalls gets all the calls that were made to GetAppByAppID.
// Check the length with:
//     len(mockedRepository.GetAppByAppIDCalls())
func (mock *RepositoryMock) GetAppByAppIDCalls() []struct {
	AppID string
} {
	var calls []struct {
		AppID string
	}
	lockRepositoryMockGetAppByAppID.RLock()
	calls = mock.calls.GetAppByAppID
	lockRepositoryMockGetAppByAppID.RUnlock()
	return calls
}

// GetActiveAppByID calls GetActiveAppByIDFunc.
func (mock *RepositoryMock) GetActiveAppByID(ID string) (*models.App, error) {
	if mock.GetActiveAppByIDFunc == nil {
		panic("RepositoryMock.GetActiveAppByIDFunc: method is nil but Repository.GetActiveAppByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockRepositoryMockGetActiveAppByID.Lock()
	mock.calls.GetActiveAppByID = append(mock.calls.GetActiveAppByID, callInfo)
	lockRepositoryMockGetActiveAppByID.Unlock()
	return mock.GetActiveAppByIDFunc(ID)
}

// GetActiveAppByIDCalls gets all the calls that were made to GetActiveAppByID.
// Check the length with:
//     len(mockedRepository.GetActiveAppByIDCalls())
func (mock *RepositoryMock) GetActiveAppByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockGetActiveAppByID.RLock()
	calls = mock.calls.GetActiveAppByID
	lockRepositoryMockGetActiveAppByID.RUnlock()
	return calls
}

// GetAppVersionsByAppID calls GetAppVersionsByAppIDFunc.
func (mock *RepositoryMock) GetAppVersionsByAppID(ID string) (*[]models.Version, error) {
	if mock.GetAppVersionsByAppIDFunc == nil {
		panic("RepositoryMock.GetAppVersionsByAppIDFunc: method is nil but Repository.GetAppVersionsByAppID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockRepositoryMockGetAppVersionsByAppID.Lock()
	mock.calls.GetAppVersionsByAppID = append(mock.calls.GetAppVersionsByAppID, callInfo)
	lockRepositoryMockGetAppVersionsByAppID.Unlock()
	return mock.GetAppVersionsByAppIDFunc(ID)
}

// GetAppVersionsByAppIDCalls gets all the calls that were made to GetAppVersionsByAppID.
// Check the length with:
//     len(mockedRepository.GetAppVersionsByAppIDCalls())
func (mock *RepositoryMock) GetAppVersionsByAppIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockGetAppVersionsByAppID.RLock()
	calls = mock.calls.GetAppVersionsByAppID
	lockRepositoryMockGetAppVersionsByAppID.RUnlock()
	return calls
}

// GetApps calls GetAppsFunc.
func (mock *RepositoryMock) GetApps() (*[]models.App, error) {
	if mock.GetAppsFunc == nil {
		panic("RepositoryMock.GetAppsFunc: method is nil but Repository.GetApps was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockGetApps.Lock()
	mock.calls.GetApps = append(mock.calls.GetApps, callInfo)
	lockRepositoryMockGetApps.Unlock()
	return mock.GetAppsFunc()
}

// GetAppsCalls gets all the calls that were made to GetApps.
// Check the length with:
//     len(mockedRepository.GetAppsCalls())
func (mock *RepositoryMock) GetAppsCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockGetApps.RLock()
	calls = mock.calls.GetApps
	lockRepositoryMockGetApps.RUnlock()
	return calls
}

// UnDeleteAppByAppID calls UnDeleteAppByAppIDFunc.
func (mock *RepositoryMock) UnDeleteAppByAppID(appID string) error {
	if mock.UnDeleteAppByAppIDFunc == nil {
		panic("RepositoryMock.UnDeleteAppByAppIDFunc: method is nil but Repository.UnDeleteAppByAppID was just called")
	}
	callInfo := struct {
		AppID string
	}{
		AppID: appID,
	}
	lockRepositoryMockUnDeleteAppByAppID.Lock()
	mock.calls.UnDeleteAppByAppID = append(mock.calls.UnDeleteAppByAppID, callInfo)
	lockRepositoryMockUnDeleteAppByAppID.Unlock()
	return mock.UnDeleteAppByAppIDFunc(appID)
}

// UnDeleteAppByAppIDCalls gets all the calls that were made to UnDeleteAppByAppID.
// Check the length with:
//     len(mockedRepository.UnDeleteAppByAppIDCalls())
func (mock *RepositoryMock) UnDeleteAppByAppIDCalls() []struct {
	AppID string
} {
	var calls []struct {
		AppID string
	}
	lockRepositoryMockUnDeleteAppByAppID.RLock()
	calls = mock.calls.UnDeleteAppByAppID
	lockRepositoryMockUnDeleteAppByAppID.RUnlock()
	return calls
}

// UpdateAppVersions calls UpdateAppVersionsFunc.
func (mock *RepositoryMock) UpdateAppVersions(versions []models.Version) error {
	if mock.UpdateAppVersionsFunc == nil {
		panic("RepositoryMock.UpdateAppVersionsFunc: method is nil but Repository.UpdateAppVersions was just called")
	}
	callInfo := struct {
		Versions []models.Version
	}{
		Versions: versions,
	}
	lockRepositoryMockUpdateAppVersions.Lock()
	mock.calls.UpdateAppVersions = append(mock.calls.UpdateAppVersions, callInfo)
	lockRepositoryMockUpdateAppVersions.Unlock()
	return mock.UpdateAppVersionsFunc(versions)
}

// UpdateAppVersionsCalls gets all the calls that were made to UpdateAppVersions.
// Check the length with:
//     len(mockedRepository.UpdateAppVersionsCalls())
func (mock *RepositoryMock) UpdateAppVersionsCalls() []struct {
	Versions []models.Version
} {
	var calls []struct {
		Versions []models.Version
	}
	lockRepositoryMockUpdateAppVersions.RLock()
	calls = mock.calls.UpdateAppVersions
	lockRepositoryMockUpdateAppVersions.RUnlock()
	return calls
}
