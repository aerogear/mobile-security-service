// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apps

import (
	"github.com/aerogear/mobile-security-service/pkg/models"
	"sync"
)

var (
	lockRepositoryMockGetAppByID            sync.RWMutex
	lockRepositoryMockGetAppVersionsByAppID sync.RWMutex
	lockRepositoryMockGetApps               sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             GetAppByIDFunc: func(ID string) (*models.App, error) {
// 	               panic("mock out the GetAppByID method")
//             },
//             GetAppVersionsByAppIDFunc: func(id string) (*[]models.Version, error) {
// 	               panic("mock out the GetAppVersionsByAppID method")
//             },
//             GetAppsFunc: func() (*[]models.App, error) {
// 	               panic("mock out the GetApps method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// GetAppByIDFunc mocks the GetAppByID method.
	GetAppByIDFunc func(ID string) (*models.App, error)

	// GetAppVersionsByAppIDFunc mocks the GetAppVersionsByAppID method.
	GetAppVersionsByAppIDFunc func(id string) (*[]models.Version, error)

	// GetAppsFunc mocks the GetApps method.
	GetAppsFunc func() (*[]models.App, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAppByID holds details about calls to the GetAppByID method.
		GetAppByID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetAppVersionsByAppID holds details about calls to the GetAppVersionsByAppID method.
		GetAppVersionsByAppID []struct {
			// ID is the id argument value.
			ID string
		}
		// GetApps holds details about calls to the GetApps method.
		GetApps []struct {
		}
	}
}

// GetAppByID calls GetAppByIDFunc.
func (mock *RepositoryMock) GetAppByID(ID string) (*models.App, error) {
	if mock.GetAppByIDFunc == nil {
		panic("RepositoryMock.GetAppByIDFunc: method is nil but Repository.GetAppByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockRepositoryMockGetAppByID.Lock()
	mock.calls.GetAppByID = append(mock.calls.GetAppByID, callInfo)
	lockRepositoryMockGetAppByID.Unlock()
	return mock.GetAppByIDFunc(ID)
}

// GetAppByIDCalls gets all the calls that were made to GetAppByID.
// Check the length with:
//     len(mockedRepository.GetAppByIDCalls())
func (mock *RepositoryMock) GetAppByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockGetAppByID.RLock()
	calls = mock.calls.GetAppByID
	lockRepositoryMockGetAppByID.RUnlock()
	return calls
}

// GetAppVersionsByAppID calls GetAppVersionsByAppIDFunc.
func (mock *RepositoryMock) GetAppVersionsByAppID(id string) (*[]models.Version, error) {
	if mock.GetAppVersionsByAppIDFunc == nil {
		panic("RepositoryMock.GetAppVersionsByAppIDFunc: method is nil but Repository.GetAppVersionsByAppID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockRepositoryMockGetAppVersionsByAppID.Lock()
	mock.calls.GetAppVersionsByAppID = append(mock.calls.GetAppVersionsByAppID, callInfo)
	lockRepositoryMockGetAppVersionsByAppID.Unlock()
	return mock.GetAppVersionsByAppIDFunc(id)
}

// GetAppVersionsByAppIDCalls gets all the calls that were made to GetAppVersionsByAppID.
// Check the length with:
//     len(mockedRepository.GetAppVersionsByAppIDCalls())
func (mock *RepositoryMock) GetAppVersionsByAppIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockGetAppVersionsByAppID.RLock()
	calls = mock.calls.GetAppVersionsByAppID
	lockRepositoryMockGetAppVersionsByAppID.RUnlock()
	return calls
}

// GetApps calls GetAppsFunc.
func (mock *RepositoryMock) GetApps() (*[]models.App, error) {
	if mock.GetAppsFunc == nil {
		panic("RepositoryMock.GetAppsFunc: method is nil but Repository.GetApps was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockGetApps.Lock()
	mock.calls.GetApps = append(mock.calls.GetApps, callInfo)
	lockRepositoryMockGetApps.Unlock()
	return mock.GetAppsFunc()
}

// GetAppsCalls gets all the calls that were made to GetApps.
// Check the length with:
//     len(mockedRepository.GetAppsCalls())
func (mock *RepositoryMock) GetAppsCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockGetApps.RLock()
	calls = mock.calls.GetApps
	lockRepositoryMockGetApps.RUnlock()
	return calls
}
